{
    "version": "https://jsonfeed.org/version/1",
    "title": "AZ • All posts by \"kde connect\" tag",
    "description": "Beyond the sky, into the nyaamament",
    "home_page_url": "https://ApolloZhu.github.io/en",
    "items": [
        {
            "id": "https://apollozhu.github.io/en/2023/04/17/backporting-swiftui-apis-with-result-builders/",
            "url": "https://apollozhu.github.io/en/2023/04/17/backporting-swiftui-apis-with-result-builders/",
            "title": "Backporting SwiftUI APIs with Result Builders",
            "date_published": "2023-04-17T12:42:46.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/en/assets/css/APlayer.min.css\"><script src=\"/en/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/en/assets/js/Meting.min.js\"></script><p>When Apple announced SwiftUI back in 2019, there’s a new language feature called “function builder” that didn’t go through the Swift Evolution process but was shipped with Apple’s Swift toolchain to make SwiftUI a reality. I’m glad that the community decided to adopt this feature as result builders, allowing us to mimic SwiftUI’s API ourselves.</p>\n<span id=\"more\"></span>\n<div class=\"note danger\"><h2 id=\"disclaimer\"><a class=\"markdownIt-Anchor\" href=\"#disclaimer\"></a> Disclaimer</h2>\n<p>This code is written without knowledge of how Apple’s SwiftUI framework actually works.</p>\n</div>\n<h2 id=\"motivation\"><a class=\"markdownIt-Anchor\" href=\"#motivation\"></a> Motivation</h2>\n<p>When <a href=\"https://invent.kde.org/network/kdeconnect-ios\">KDE Connect iOS</a> tried to lower deployment target to iOS 14, we ran into the limitation of <a href=\"https://sarunw.com/posts/how-to-show-multiple-alerts-on-the-same-view-in-swiftui/\">not being able to show multiple alerts in the same View</a>, and had to find a very hacky <a href=\"https://invent.kde.org/network/kdeconnect-ios/-/merge_requests/16\">workaround</a> for iOS 14 only by adding many hidden views to the view hierarchy, and duplicating the buttons/texts:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">#available</span>(<span class=\"keyword\">iOS</span> <span class=\"number\">15.0</span>, <span class=\"operator\">*</span>) &#123;</span><br><span class=\"line\">  content</span><br><span class=\"line\">    .alert(title1, isPresented: <span class=\"variable\">$isPresented1</span>) &#123;</span><br><span class=\"line\">      primaryButton1</span><br><span class=\"line\">      secondaryButton1</span><br><span class=\"line\">    &#125; message: &#123;</span><br><span class=\"line\">      subtitle1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .alert(<span class=\"operator\">...</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  content</span><br><span class=\"line\"></span><br><span class=\"line\">  hiddenView1</span><br><span class=\"line\">    .alert(<span class=\"variable\">$isPresented1</span>) &#123;</span><br><span class=\"line\">      <span class=\"type\">Alert</span>(</span><br><span class=\"line\">        title: title1,</span><br><span class=\"line\">        message: subtitle1,</span><br><span class=\"line\">        primaryButton: primaryButton1,</span><br><span class=\"line\">        secondaryButton: secondaryButton1</span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  hiddenView2</span><br><span class=\"line\">    .alert(<span class=\"operator\">...</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"proposed-solution\"><a class=\"markdownIt-Anchor\" href=\"#proposed-solution\"></a> Proposed Solution</h2>\n<p>By mimicking SwiftUI’s new <code>alert</code> API but making it available on iOS 14, we could hide the complexity away from the call site allowing only writing code as in the iOS 15 branch, while doing all the dirty work inside the actual implementation:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">func</span> <span class=\"title function_\">alert</span>(</span><br><span class=\"line\">    <span class=\"keyword\">_</span> <span class=\"params\">titleKey</span>: <span class=\"type\">LocalizedStringKey</span>,</span><br><span class=\"line\">    <span class=\"params\">isPresented</span>: <span class=\"type\">Binding</span>&lt;<span class=\"type\">Bool</span>&gt;,</span><br><span class=\"line\">    <span class=\"meta\">@AlertActionBuilder</span> <span class=\"params\">actions</span>: () -&gt; <span class=\"type\">AlertActionBuilder</span>.<span class=\"type\">Buttons</span>?,</span><br><span class=\"line\">    <span class=\"meta\">@ViewBuilder</span> <span class=\"params\">message</span>: () -&gt; <span class=\"type\">Text</span>?</span><br><span class=\"line\">  ) -&gt; <span class=\"keyword\">some</span> <span class=\"type\">View</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>But wait, what is <code>AlertActionBuilder</code>? To understand why we need to introduce this new thingy, let’s first look at what’s <code>ViewBuilder</code>, and why we can’t use <code>ViewBuilder</code> for our purpose.</p>\n<h2 id=\"detailed-design\"><a class=\"markdownIt-Anchor\" href=\"#detailed-design\"></a> Detailed Design</h2>\n<h3 id=\"viewbuilder\"><a class=\"markdownIt-Anchor\" href=\"#viewbuilder\"></a> <code>ViewBuilder</code></h3>\n<p>The new iOS 15 SwiftUI alert API is defined as follows:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">func</span> <span class=\"title function_\">alert</span>&lt;<span class=\"type\">A</span>, <span class=\"type\">M</span>&gt;(</span><br><span class=\"line\">    <span class=\"keyword\">_</span> <span class=\"params\">titleKey</span>: <span class=\"type\">LocalizedStringKey</span>,</span><br><span class=\"line\">    <span class=\"params\">isPresented</span>: <span class=\"type\">Binding</span>&lt;<span class=\"type\">Bool</span>&gt;,</span><br><span class=\"line\">    <span class=\"meta\">@ViewBuilder</span> <span class=\"params\">actions</span>: () -&gt; <span class=\"type\">A</span>,</span><br><span class=\"line\">    <span class=\"meta\">@ViewBuilder</span> <span class=\"params\">message</span>: () -&gt; <span class=\"type\">M</span></span><br><span class=\"line\">  ) -&gt; <span class=\"keyword\">some</span> <span class=\"type\">View</span> <span class=\"keyword\">where</span> <span class=\"type\">A</span> : <span class=\"type\">View</span>, <span class=\"type\">M</span> : <span class=\"type\">View</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Note the <code>@ViewBuilder</code> attribute in front of <code>actions</code> and <code>message</code>: this is what enables us to write code like:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> body: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">Button</span>(<span class=\"operator\">...</span>)</span><br><span class=\"line\">  <span class=\"type\">Button</span>(<span class=\"operator\">...</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Normally, when the Swift compilers sees values that are not used as part of another expression, assigned to a variable, or returned, it will complain about “Result of … is unused,” as you can see by writing the same code but for a computed property that’s not a <code>View</code>'s <a href=\"https://developer.apple.com/documentation/swiftui/view/body-swift.property\"><code>body</code></a>:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> buttons: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;  <span class=\"comment\">// Function declares an opaque return type,</span></span><br><span class=\"line\">                          <span class=\"comment\">// but has no return statements in its body</span></span><br><span class=\"line\">                          <span class=\"comment\">// from which to infer an underlying type</span></span><br><span class=\"line\">  <span class=\"type\">Button</span>(<span class=\"operator\">...</span>) <span class=\"comment\">// Result of &#x27;Button&lt;Label&gt;&#x27; initializer is unused</span></span><br><span class=\"line\">  <span class=\"type\">Button</span>(<span class=\"operator\">...</span>) <span class=\"comment\">// Did you mean to return the last expression?</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>However, by annotating it with SwiftUI’s custom <code>ViewBuilder</code> attribute, the code now compiles by building a combined result after getting transformed using <a href=\"https://developer.apple.com/documentation/swiftui/viewbuilder#building-content\">rules specified by <code>ViewBuilder</code></a>, which the final result made using its <code>buildBlock</code> function is then <a href=\"https://docs.swift.org/swift-book/documentation/the-swift-programming-language/properties/#Shorthand-Getter-Declaration\">implicitly returned</a>:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ViewBuilder</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> buttons: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* let v1 = */</span> <span class=\"type\">Button</span>(<span class=\"operator\">...</span>)</span><br><span class=\"line\">  <span class=\"comment\">/* let v2 = */</span> <span class=\"type\">Button</span>(<span class=\"operator\">...</span>)</span><br><span class=\"line\">  <span class=\"comment\">// return buildBlock(v1, v2)</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Because code annotated with the <code>ViewBuilder</code> attribute doesn’t follow how Swift code normally gets compiled, it’s kind of like a miniature language within Swift specialized for constructing views from closures (i.e. things within braces). We call this kind of language a <strong>Domain Specific Language</strong>, or <strong>DSL</strong>.</p>\n<h3 id=\"differences-between-ios-14-and-ios-15-api\"><a class=\"markdownIt-Anchor\" href=\"#differences-between-ios-14-and-ios-15-api\"></a> Differences Between iOS 14 and iOS 15 API</h3>\n<p>While the iOS 15 API allows arbitrary views as the list of <code>actions</code>, the iOS 14 API requires either</p>\n<ol>\n<li>no buttons,</li>\n<li>a single dismiss button, or</li>\n<li>a primary and a secondary button.</li>\n</ol>\n<p>This is fine as <code>ViewBuilder</code>'s <code>buildBlock</code> function returns a <code>TupleView</code>, from which we can extract the buttons to pass to iOS 14’s API. However, the bigger problem is that <code>ButtonRole</code> is only available on iOS 15 and we can’t peek inside SwiftUI’s <code>Button</code> <code>struct</code> to figure out what role it has – nor can we do so on iOS 14 where the <code>ButtonRole</code> type doesn’t exist. Thus, we’ll need our own type to store relevant information then later convert it to <code>Button</code> on iOS 15 and <code>Alert.Button</code> on iOS 14:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">_Button</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">enum</span> <span class=\"title class_\">Role</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> cancel, destructive</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> titleKey: <span class=\"type\">LocalizedStringKey</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> role: <span class=\"type\">Role</span>?</span><br><span class=\"line\">  <span class=\"keyword\">let</span> action: () -&gt; <span class=\"type\">Void</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">@available</span>(<span class=\"keyword\">iOS</span>, introduced: <span class=\"number\">15</span>)</span><br><span class=\"line\">  <span class=\"keyword\">var</span> iOS15Button: <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123; <span class=\"operator\">...</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">@available</span>(<span class=\"keyword\">iOS</span>, deprecated: <span class=\"number\">15</span>)</span><br><span class=\"line\">  <span class=\"keyword\">var</span> iOS14Button: <span class=\"type\">Alert</span>.<span class=\"type\">Button</span> &#123; <span class=\"operator\">...</span> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"making-alertactionbuilder-a-dsl-for-building-alert-actions\"><a class=\"markdownIt-Anchor\" href=\"#making-alertactionbuilder-a-dsl-for-building-alert-actions\"></a> Making <code>AlertActionBuilder</code> - a DSL for Building Alert Actions</h3>\n<p>Making a DSL in Swift using result builder is very simple: declaring a new type and annotate it with the <code>resultBuilder</code> attribute, then provide at least one static <code>buildBlock</code>/<code>buildPartialBlock</code> method:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@resultBuilder</span></span><br><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">AlertActionBuilder</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">func</span> <span class=\"title function_\">buildBlock</span>(<span class=\"comment\">/* TODO */</span>) -&gt; <span class=\"comment\">/* TODO */</span> &#123; <span class=\"operator\">...</span> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>To allow building the 3 types of alert buttons mentioned above, we can represent the result as an <code>Optional&lt;AlertActionBuilder.Buttons&gt;</code>:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">AlertActionBuilder</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">enum</span> <span class=\"title class_\">Buttons</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> dismiss(_Button)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> primary(_Button, secondary: _Button)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// AlertActionBuilder.Buttons? has an additional case</span></span><br><span class=\"line\">  <span class=\"comment\">// `nil` to represent no buttons.</span></span><br></pre></td></tr></table></figure>\n<p>The Swift compiler will try to match contents inside an <code>@AlertActionBuilder</code> closure with the <code>buildBlock</code> functions defined. For example, if there’s nothing inside the curly braces, it will choose:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">func</span> <span class=\"title function_\">buildBlock</span>() -&gt; <span class=\"type\">Buttons</span>? &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Similarly, it will do so for the one button and two buttons cases:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">func</span> <span class=\"title function_\">buildBlock</span>(<span class=\"keyword\">_</span> <span class=\"params\">button</span>: _Button) -&gt; <span class=\"type\">Buttons</span>? &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> .dismiss(button)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">func</span> <span class=\"title function_\">buildBlock</span>(<span class=\"keyword\">_</span> <span class=\"params\">button1</span>: _Button, <span class=\"keyword\">_</span> <span class=\"params\">button2</span>: _Button) -&gt; <span class=\"type\">Buttons</span>? &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Maybe switch the order depending what roles each of these buttons has</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> .primary(button1, secondary: button2)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>That’s it! We can now write code like:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">content</span><br><span class=\"line\">  .alert(title, isPresented: <span class=\"variable\">$isPresented</span>) &#123;</span><br><span class=\"line\">    _Button(<span class=\"string\">&quot;Unpair&quot;</span>, role: .destructive) &#123; <span class=\"operator\">...</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    _Button(<span class=\"string\">&quot;Cancel&quot;</span>, role: .dismiss) &#123; <span class=\"operator\">...</span> &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .alert(<span class=\"operator\">...</span>)</span><br></pre></td></tr></table></figure>\n<p>and switch on <code>AlertActionBuilder.Buttons?</code> inside our <code>alert</code> API implementation to call appropriate SwiftUI APIs on both iOS 14 and iOS 15. The need to use <code>_Button</code> instead of <code>Button</code> is annoying though, so let’s use the tricked mentioned in <a href=\"/en/2023/04/13/shimming-swiftui-apis-by-hacking-overload-resolution/\" title=\"Shimming SwiftUI APIs by Hacking Overload Resolution\">Shimming SwiftUI APIs by Hacking Overload Resolution</a> to fix that:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">Button</span>(</span><br><span class=\"line\">  <span class=\"keyword\">_</span> <span class=\"params\">titleKey</span>: <span class=\"type\">LocalizedStringKey</span>,</span><br><span class=\"line\">  <span class=\"params\">role</span>: _Button.<span class=\"type\">Role</span>? <span class=\"operator\">=</span> <span class=\"literal\">nil</span>,</span><br><span class=\"line\">  <span class=\"params\">action</span>: <span class=\"keyword\">@escaping</span> () -&gt; <span class=\"type\">Void</span></span><br><span class=\"line\">) -&gt; _Button &#123;</span><br><span class=\"line\">  _Button(titleKey, role: role, action: action)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Way to go!</p>\n<h2 id=\"further-readings\"><a class=\"markdownIt-Anchor\" href=\"#further-readings\"></a> Further Readings</h2>\n<p>The full implementation can be found at <a href=\"https://invent.kde.org/network/kdeconnect-ios/-/merge_requests/34\">[Refactor] Reduce code duplication for iOS 14 support</a>. To learn more about building DSLs and using result builders, you can checkout:</p>\n<ul>\n<li><a href=\"https://github.com/apple/swift-evolution/blob/main/proposals/0289-result-builders.md\">SE-0289: Result builders</a></li>\n<li><a href=\"https://github.com/apple/swift-evolution/blob/main/proposals/0348-buildpartialblock.md\">SE-0348: <code>buildPartialBlock</code> for result builders</a></li>\n<li><a href=\"https://developer.apple.com/videos/play/wwdc2021/10253/\">WWDC21-10253: Write a DSL in Swift using result builders</a></li>\n<li><a href=\"https://forums.swift.org/t/improved-result-builder-implementation-in-swift-5-8/63192\">Improved Result Builder Implementation in Swift 5.8</a></li>\n<li><a href=\"https://github.com/ApolloZhu/BoolBuilder\"><code>ApolloZhu/BoolBuilder</code>: <code>@resultBuilder</code> for building a <code>Bool</code></a></li>\n</ul>\n<p>On a side note, I’m not sure what <a href=\"https://github.com/apple/swift-evolution/blob/main/visions/macros.md\">macros</a> – which is different from result builders and <a href=\"https://github.com/apple/swift-evolution/blob/main/proposals/0258-property-wrappers.md\">property wrappers</a> though all of them begin with an <code>@</code> – will impact how people approach implementing DSLs in Swift in the future, but they are certainly interesting for library authors to explore as well.</p>\n",
            "tags": [
                "kde",
                "KDE Connect"
            ]
        },
        {
            "id": "https://apollozhu.github.io/en/2023/04/13/shimming-swiftui-apis-by-hacking-overload-resolution/",
            "url": "https://apollozhu.github.io/en/2023/04/13/shimming-swiftui-apis-by-hacking-overload-resolution/",
            "title": "Shimming SwiftUI APIs by Hacking Overload Resolution",
            "date_published": "2023-04-13T23:52:50.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/en/assets/css/APlayer.min.css\"><script src=\"/en/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/en/assets/js/Meting.min.js\"></script><p>The best way to build an app is with Swift and SwiftUI – if you don’t have to support older iOS versions. But it doesn’t have to be like this – with one weird little trick.</p>\n<span id=\"more\"></span>\n<h2 id=\"motivation\"><a class=\"markdownIt-Anchor\" href=\"#motivation\"></a> Motivation</h2>\n<p>Because Swift doesn’t support back deploying types and only recently implemented <a href=\"https://github.com/apple/swift-evolution/blob/main/proposals/0376-function-back-deployment.md\">SE-0376 Function Back Deployment</a>, SwiftUI as a system framework can only introduce new features for the latest iOS version. As <a href=\"https://invent.kde.org/network/kdeconnect-ios\">KDE Connect iOS</a> needs to support iOS 14, if we want to use some of the newer SwiftUI APIs, we have to check what’s the iOS version of the current device, then execute different branches of code depending on what API is available:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">#available</span>(<span class=\"keyword\">iOS</span> <span class=\"number\">15</span>, <span class=\"operator\">*</span>) &#123;</span><br><span class=\"line\">  theSameActualViewContent</span><br><span class=\"line\">    .alert(title, isPresented: <span class=\"variable\">$isPresented</span>) &#123;</span><br><span class=\"line\">      primaryButton</span><br><span class=\"line\">      secondaryButton</span><br><span class=\"line\">    &#125; message: &#123;</span><br><span class=\"line\">      subtitle</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  theSameActualViewContent</span><br><span class=\"line\">    .alert(isPresented: isPresented) &#123;</span><br><span class=\"line\">      <span class=\"type\">Alert</span>(</span><br><span class=\"line\">        title: title,</span><br><span class=\"line\">        message: subtitle,</span><br><span class=\"line\">        primaryButton: primaryButton,</span><br><span class=\"line\">        secondaryButton: secondaryButton</span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Not only do we have to add the <code>if #available</code> checks, to reduce code duplication, we need to introduce variables like <code>theSameActualViewContent</code>, <code>title</code>, and <code>primaryButton</code>. If we have multiple alerts, we have to repeat this process for every single one of them. The friction makes writing SwiftUI not fun anymore.</p>\n<h2 id=\"proposed-solution\"><a class=\"markdownIt-Anchor\" href=\"#proposed-solution\"></a> Proposed Solution</h2>\n<p>One way to solve this is to “bring the new APIs to an older environment, using only the means of that environment,” or implement what people call a “<strong>shim</strong>.”</p>\n<div class=\"note info\"><p>Other common terms that describes this are “backport” and “polyfill.”</p>\n</div>\n<p>While libraries like <a href=\"https://github.com/shaps80/SwiftUIBackports\">SwiftUI Backports</a> exists, there are still times that we need to do this ourselves if the library hasn’t gotten to the thing we want, such as support for <code>@FocusState</code> on iOS 14. In addition, to make it easier to later drop support for older iOS versions, it’s possible – and the easiest – for in house wrapper/implementation to utilize <strong>overload resolution</strong> to keep the shim API exactly the same as SwiftUI at call sites. This means, instead of needing to add some disambiguator like in <a href=\"https://davedelong.com/blog/2021/10/09/simplifying-backwards-compatibility-in-swift/\">this blog post</a>:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Backport</span>.<span class=\"type\">FocusState</span> <span class=\"keyword\">var</span> isFocused</span><br><span class=\"line\"><span class=\"operator\">...</span></span><br><span class=\"line\">view.backport.refreshable &#123; <span class=\"operator\">...</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>or using a different name such as in <a href=\"https://www.youtube.com/watch?v=2IB4CuSRea4\">this YouTube video</a> and many other online tutorials:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@MyFocusState</span> <span class=\"keyword\">var</span> isFocused</span><br><span class=\"line\"><span class=\"operator\">...</span></span><br><span class=\"line\">view.myRefreshable &#123; <span class=\"operator\">...</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>the goal is to directly write:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FocusState</span> <span class=\"keyword\">var</span> isFocused</span><br><span class=\"line\"><span class=\"operator\">...</span></span><br><span class=\"line\">view.refreshable &#123; <span class=\"operator\">...</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>as if the shim doesn’t exist.</p>\n<h2 id=\"overload-resolution\"><a class=\"markdownIt-Anchor\" href=\"#overload-resolution\"></a> Overload Resolution</h2>\n<p>When multiple types, functions, and/or variables from different modules share the same name <code>X</code>, the compiler needs to figure out which one exactly are you referring to when you write <code>X</code> in source code. According to Swift’s documentation on <a href=\"https://github.com/apple/swift/blob/main/docs/Modules.rst#ambiguity\">resolving name lookup ambiguities</a>:</p>\n<blockquote>\n<ol>\n<li>Declarations in the current source file are best.</li>\n<li>Declarations from other files in the same module are better than declarations from imports.</li>\n<li>Declarations from selective imports are better than declarations from non-selective imports. (This may be used to give priority to a particular module for a given name.)</li>\n<li>Every source file implicitly imports the core standard library as a non-selective import.</li>\n<li>If the name refers to a function, normal overload resolution may resolve ambiguities.</li>\n</ol>\n</blockquote>\n<p>That means we could provide shims by declaring, for example:</p>\n<ol>\n<li>a type alias called <code>FocusState</code> to shadow SwiftUI’s definition of <code>FocusState</code> type</li>\n</ol>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typealias</span> <span class=\"type\">FocusState</span> <span class=\"operator\">=</span> <span class=\"type\">State</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>an “overload” global function that’s similar to SwiftUI’s definition of <code>Button.init</code> initializer but with custom types available on iOS 14</li>\n</ol>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">Button</span>(</span><br><span class=\"line\">  <span class=\"keyword\">_</span> <span class=\"params\">titleKey</span>: <span class=\"type\">LocalizedStringKey</span>,</span><br><span class=\"line\">  <span class=\"params\">role</span>: _Button.<span class=\"type\">Role</span>? <span class=\"operator\">=</span> <span class=\"literal\">nil</span>,</span><br><span class=\"line\">  <span class=\"params\">action</span>: <span class=\"keyword\">@escaping</span> () -&gt; <span class=\"type\">Void</span></span><br><span class=\"line\">) -&gt; _Button &#123;</span><br><span class=\"line\">  <span class=\"operator\">...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>an overload function called <code>refreshable</code> with a slightly different signature but indistinguishable from call site if using trailing closures</li>\n</ol>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// This has signature refreshable(_:) while the SwiftUI one is refreshable(action:)</span></span><br><span class=\"line\">  <span class=\"keyword\">func</span> <span class=\"title function_\">refreshable</span>(<span class=\"keyword\">_</span> <span class=\"params\">action</span>: <span class=\"keyword\">@escaping</span> <span class=\"meta\">@Sendable</span> () <span class=\"keyword\">async</span> -&gt; <span class=\"type\">Void</span>) -&gt; <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"operator\">...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Since these are “Declarations from other files in the same module,” they are “better” than declarations imported from the SwiftUI framework. As they are available on iOS 14, the compiler will happy take these shims over the actual SwiftUI APIs.</p>\n<h2 id=\"migration\"><a class=\"markdownIt-Anchor\" href=\"#migration\"></a> Migration</h2>\n<p>What needs to happen when we drop support for iOS 14? Just delete the files implementing the shims. To make sure we remember doing this, we can mark the shim APIs to be obsolete by the iOS version they become available at:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@available</span>(<span class=\"keyword\">iOS</span>, obsoleted: <span class=\"number\">15</span>,</span><br><span class=\"line\">           message: <span class=\"string\">&quot;Delete this file and use SwiftUI.FocusState instead.&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">typealias</span> <span class=\"type\">FocusState</span> <span class=\"operator\">=</span> <span class=\"type\">State</span></span><br></pre></td></tr></table></figure>\n<p>Since the backport implementation is different from SwiftUI, always test the app to make sure other parts of the code base are not relying on shim-specific behaviors.</p>\n<h2 id=\"further-readings\"><a class=\"markdownIt-Anchor\" href=\"#further-readings\"></a> Further Readings</h2>\n<p>But how do you implement the new alert API on iOS 14? Find out more at <a href=\"/en/2023/04/17/backporting-swiftui-apis-with-result-builders/\" title=\"Backporting SwiftUI APIs with Result Builders\">Backporting SwiftUI APIs with Result Builders</a>.</p>\n",
            "tags": [
                "kde",
                "KDE Connect",
                "Swift"
            ]
        },
        {
            "id": "https://apollozhu.github.io/en/2022/01/15/sideload-kde-connect-ios/",
            "url": "https://apollozhu.github.io/en/2022/01/15/sideload-kde-connect-ios/",
            "title": "Sideload KDE Connect iOS",
            "date_published": "2022-01-15T21:00:42.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/en/assets/css/APlayer.min.css\"><script src=\"/en/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/en/assets/js/Meting.min.js\"></script><div class=\"note success\"><p>For general audience, please use the official <a href=\"https://apps.apple.com/app/kde-connect/id1580245991\">App Store</a>/<a href=\"https://testflight.apple.com/join/vxCluwBF\">TestFlight</a> releases.</p>\n</div>\n<span id=\"more\"></span>\n<div class=\"note warning\"><p>This is intended for contributors outside of K Desktop Environment e.V. development group to test their code on a physical device before opening a merge request. This process should theoretically work even if you don’t have a paid Apple Developer account, though I’ve never tested.</p>\n</div>\n<div class=\"note danger\"><p>THE INSTRUCTION IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE INSTRUCTION OR THE USE OR OTHER DEALINGS IN THE INSTRUCTION.</p>\n</div>\n<ol>\n<li>Download KDE Connect iOS source code from <a href=\"https://github.com/KDE/kdeconnect-ios\">GitHub mirror</a>/<a href=\"https://invent.kde.org/network/kdeconnect-ios\">KDE Invent</a></li>\n<li>Open <code>KDE Connect.xcodeproj</code> in Xcode\n<ol>\n<li>In <code>Build Settings</code> for target <code>KDE Connect</code>, delete <code>Code Signing Entitlements</code> (but do not delete the entitlements file)</li>\n<li>In <code>Singing &amp; Capabilities</code> for target <code>KDE Connect</code>, change the <code>Team</code> and <code>Bundle Identifier</code> so the project builds for <code>Any iOS Device</code>.</li>\n<li>In <code>Products</code> folder, right click on <code>KDE Connect</code> (which shouldn’t be red) and select <code>Show In Finder</code></li>\n</ol>\n</li>\n<li>In terminal, navigate to the folder containing <code>KDE Connect.xcodeproj</code></li>\n<li>In terminal, type the following commands <em><strong>line by line</strong></em> (other than comments starting with <code>#</code>). See <a href=\"#references\">References</a> section about what each of these lines do:<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">build=<span class=\"comment\">#drag the KDE Connect.app here from Finder</span></span><br><span class=\"line\">security cms -D -i <span class=\"string\">&quot;<span class=\"variable\">$build</span>/embedded.mobileprovision&quot;</span> &gt; provision.plist</span><br><span class=\"line\">name=$(<span class=\"built_in\">basename</span> <span class=\"string\">&quot;`pwd`&quot;</span>)</span><br><span class=\"line\">/usr/libexec/PlistBuddy -x -c <span class=\"string\">&#x27;Print:Entitlements&#x27;</span> provision.plist &gt; entitlements.plist</span><br><span class=\"line\"><span class=\"comment\"># Note that extra &#x27; is added because name contains whitespace in path</span></span><br><span class=\"line\">/usr/libexec/PlistBuddy -x -c <span class=\"string\">&quot;Merge &#x27;<span class=\"variable\">$name</span>/<span class=\"variable\">$name</span>.entitlements&#x27;&quot;</span> entitlements.plist</span><br><span class=\"line\"><span class=\"comment\"># Replace `YOUR NAME (TEAM)` with the actual value of your Apple Development Certificate name (found in KeyChain Access)</span></span><br><span class=\"line\">codesign -d --entitlements entitlements.plist -f -s <span class=\"string\">&quot;Apple Development: YOUR NAME (TEAM)&quot;</span> <span class=\"variable\">$build</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>Place the <code>KDE Connect.app</code> in a folder named <code>Payload</code>, zip the <code>Payload</code> folder, and (re)name it <code>KDE Connect.ipa</code></li>\n<li>Install self-signed <code>KDE Connect.ipa</code> on your own physical device for testing (requires jailbreaking or apps like Sideloadly)</li>\n</ol>\n<h2 id=\"references\"><a class=\"markdownIt-Anchor\" href=\"#references\"></a> References</h2>\n<ul>\n<li><a href=\"https://fotidim.com/carplay-apps-without-entitlements-in-an-actual-car-37a708758262\">CarPlay apps without Apple’s blessings on a real car</a></li>\n<li><a href=\"https://gist.github.com/bananita/8039021\">How to convert *app to *ipa</a></li>\n</ul>\n",
            "tags": [
                "kde",
                "KDE Connect"
            ]
        }
    ]
}