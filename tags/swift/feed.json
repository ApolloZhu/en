{
    "version": "https://jsonfeed.org/version/1",
    "title": "AZ • All posts by \"swift\" tag",
    "description": "Beyond the sky, into the nyaamament",
    "home_page_url": "https://ApolloZhu.github.io/en",
    "items": [
        {
            "id": "https://apollozhu.github.io/en/2023/04/13/shimming-swiftui-apis-by-hacking-overload-resolution/",
            "url": "https://apollozhu.github.io/en/2023/04/13/shimming-swiftui-apis-by-hacking-overload-resolution/",
            "title": "Shimming SwiftUI APIs by Hacking Overload Resolution",
            "date_published": "2023-04-13T23:52:50.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/en/assets/css/APlayer.min.css\"><script src=\"/en/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/en/assets/js/Meting.min.js\"></script><p>The best way to build an app is with Swift and SwiftUI – if you don’t have to support older iOS versions. But it doesn’t have to be like this – with one weird little trick.</p>\n<span id=\"more\"></span>\n<h2 id=\"motivation\"><a class=\"markdownIt-Anchor\" href=\"#motivation\"></a> Motivation</h2>\n<p>Because Swift doesn’t support back deploying types and only recently implemented <a href=\"https://github.com/apple/swift-evolution/blob/main/proposals/0376-function-back-deployment.md\">SE-0376 Function Back Deployment</a>, SwiftUI as a system framework can only introduce new features for the latest iOS version. As <a href=\"https://invent.kde.org/network/kdeconnect-ios\">KDE Connect iOS</a> needs to support iOS 14, if we want to use some of the newer SwiftUI APIs, we have to check what’s the iOS version of the current device, then execute different branches of code depending on what API is available:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">#available</span>(<span class=\"keyword\">iOS</span> <span class=\"number\">15</span>, <span class=\"operator\">*</span>) &#123;</span><br><span class=\"line\">  theSameActualViewContent</span><br><span class=\"line\">    .alert(title, isPresented: <span class=\"variable\">$isPresented</span>) &#123;</span><br><span class=\"line\">      primaryButton</span><br><span class=\"line\">      secondaryButton</span><br><span class=\"line\">    &#125; message: &#123;</span><br><span class=\"line\">      subtitle</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  theSameActualViewContent</span><br><span class=\"line\">    .alert(isPresented: isPresented) &#123;</span><br><span class=\"line\">      <span class=\"type\">Alert</span>(</span><br><span class=\"line\">        title: title,</span><br><span class=\"line\">        message: subtitle,</span><br><span class=\"line\">        primaryButton: primaryButton,</span><br><span class=\"line\">        secondaryButton: secondaryButton</span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Not only do we have to add the <code>if #available</code> checks, to reduce code duplication, we need to introduce variables like <code>theSameActualViewContent</code>, <code>title</code>, and <code>primaryButton</code>. If we have multiple alerts, we have to repeat this process for every single one of them. The friction makes writing SwiftUI not fun anymore.</p>\n<h2 id=\"proposed-solution\"><a class=\"markdownIt-Anchor\" href=\"#proposed-solution\"></a> Proposed Solution</h2>\n<p>One way to solve this is to “bring the new APIs to an older environment, using only the means of that environment,” or implement what people call a “<strong>shim</strong>.”</p>\n<div class=\"note info\"><p>Other common terms that describes this are “backport” and “polyfill.”</p>\n</div>\n<p>While libraries like <a href=\"https://github.com/shaps80/SwiftUIBackports\">SwiftUI Backports</a> exists, there are still times that we need to do this ourselves if the library hasn’t gotten to the thing we want, such as support for <code>@FocusState</code> on iOS 14. In addition, to make it easier to later drop support for older iOS versions, it’s possible – and the easiest – for in house wrapper/implementation to utilize <strong>overload resolution</strong> to keep the shim API exactly the same as SwiftUI at call sites. This means, instead of needing to add some disambiguator like in <a href=\"https://davedelong.com/blog/2021/10/09/simplifying-backwards-compatibility-in-swift/\">this blog post</a>:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Backport</span>.<span class=\"type\">FocusState</span> <span class=\"keyword\">var</span> isFocused</span><br><span class=\"line\"><span class=\"operator\">...</span></span><br><span class=\"line\">view.backport.refreshable &#123; <span class=\"operator\">...</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>or using a different name such as in <a href=\"https://www.youtube.com/watch?v=2IB4CuSRea4\">this YouTube video</a> and many other online tutorials:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@MyFocusState</span> <span class=\"keyword\">var</span> isFocused</span><br><span class=\"line\"><span class=\"operator\">...</span></span><br><span class=\"line\">view.myRefreshable &#123; <span class=\"operator\">...</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>the goal is to directly write:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FocusState</span> <span class=\"keyword\">var</span> isFocused</span><br><span class=\"line\"><span class=\"operator\">...</span></span><br><span class=\"line\">view.refreshable &#123; <span class=\"operator\">...</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>as if the shim doesn’t exist.</p>\n<h2 id=\"overload-resolution\"><a class=\"markdownIt-Anchor\" href=\"#overload-resolution\"></a> Overload Resolution</h2>\n<p>When multiple types, functions, and/or variables from different modules share the same name <code>X</code>, the compiler needs to figure out which one exactly are you referring to when you write <code>X</code> in source code. According to Swift’s documentation on <a href=\"https://github.com/apple/swift/blob/main/docs/Modules.rst#ambiguity\">resolving name lookup ambiguities</a>:</p>\n<blockquote>\n<ol>\n<li>Declarations in the current source file are best.</li>\n<li>Declarations from other files in the same module are better than declarations from imports.</li>\n<li>Declarations from selective imports are better than declarations from non-selective imports. (This may be used to give priority to a particular module for a given name.)</li>\n<li>Every source file implicitly imports the core standard library as a non-selective import.</li>\n<li>If the name refers to a function, normal overload resolution may resolve ambiguities.</li>\n</ol>\n</blockquote>\n<p>That means we could provide shims by declaring, for example:</p>\n<ol>\n<li>a type alias called <code>FocusState</code> to shadow SwiftUI’s definition of <code>FocusState</code> type</li>\n</ol>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typealias</span> <span class=\"type\">FocusState</span> <span class=\"operator\">=</span> <span class=\"type\">State</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>an “overload” global function that’s similar to SwiftUI’s definition of <code>Button.init</code> initializer but with custom types available on iOS 14</li>\n</ol>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">Button</span>(</span><br><span class=\"line\">  <span class=\"keyword\">_</span> <span class=\"params\">titleKey</span>: <span class=\"type\">LocalizedStringKey</span>,</span><br><span class=\"line\">  <span class=\"params\">role</span>: _Button.<span class=\"type\">Role</span>? <span class=\"operator\">=</span> <span class=\"literal\">nil</span>,</span><br><span class=\"line\">  <span class=\"params\">action</span>: <span class=\"keyword\">@escaping</span> () -&gt; <span class=\"type\">Void</span></span><br><span class=\"line\">) -&gt; _Button &#123;</span><br><span class=\"line\">  <span class=\"operator\">...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>an overload function called <code>refreshable</code> with a slightly different signature but indistinguishable from call site if using trailing closures</li>\n</ol>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extension</span> <span class=\"title class_\">View</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// This has signature refreshable(_:) while the SwiftUI one is refreshable(action:)</span></span><br><span class=\"line\">  <span class=\"keyword\">func</span> <span class=\"title function_\">refreshable</span>(<span class=\"keyword\">_</span> <span class=\"params\">action</span>: <span class=\"keyword\">@escaping</span> <span class=\"meta\">@Sendable</span> () <span class=\"keyword\">async</span> -&gt; <span class=\"type\">Void</span>) -&gt; <span class=\"keyword\">some</span> <span class=\"type\">View</span> &#123;</span><br><span class=\"line\">    <span class=\"operator\">...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Since these are “Declarations from other files in the same module,” they are “better” than declarations imported from the SwiftUI framework. As they are available on iOS 14, the compiler will happy take these shims over the actual SwiftUI APIs.</p>\n<h2 id=\"migration\"><a class=\"markdownIt-Anchor\" href=\"#migration\"></a> Migration</h2>\n<p>What needs to happen when we drop support for iOS 14? Just delete the files implementing the shims. To make sure we remember doing this, we can mark the shim APIs to be obsolete by the iOS version they become available at:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@available</span>(<span class=\"keyword\">iOS</span>, obsoleted: <span class=\"number\">15</span>,</span><br><span class=\"line\">           message: <span class=\"string\">&quot;Delete this file and use SwiftUI.FocusState instead.&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">typealias</span> <span class=\"type\">FocusState</span> <span class=\"operator\">=</span> <span class=\"type\">State</span></span><br></pre></td></tr></table></figure>\n<p>Since the backport implementation is different from SwiftUI, always test the app to make sure other parts of the code base are not relying on shim-specific behaviors.</p>\n<h2 id=\"further-readings\"><a class=\"markdownIt-Anchor\" href=\"#further-readings\"></a> Further Readings</h2>\n<p>But how do you implement the new alert API on iOS 14? Find out more at <a href=\"/en/2023/04/17/backporting-swiftui-apis-with-result-builders/\" title=\"Backporting SwiftUI APIs with Result Builders\">Backporting SwiftUI APIs with Result Builders</a>.</p>\n",
            "tags": [
                "kde",
                "KDE Connect",
                "Swift"
            ]
        },
        {
            "id": "https://apollozhu.github.io/en/2018/03/15/wwdc18-scholarships-info/",
            "url": "https://apollozhu.github.io/en/2018/03/15/wwdc18-scholarships-info/",
            "title": "WWDC18 Scholarships Information",
            "date_published": "2018-03-15T19:42:39.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/en/assets/css/APlayer.min.css\"><script src=\"/en/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/en/assets/js/Meting.min.js\"></script><blockquote>\n<p><a href=\"/2018/03/15/wwdc18-scholarships-info/\">阅读中文版本</a></p>\n</blockquote>\n<details>\n<summary>Wait, before we start, what is WWDC?</summary>\n<p>I’ll add my description soon, but for now, check out the <a href=\"https://developer.apple.com/wwdc\">official website</a>.</p>\n</details>\n<p>Thank you all for being interested in <a href=\"https://developer.apple.com/wwdc\">Apple’s Worldwide Developer Conference</a> and <a href=\"https://developer.apple.com/wwdc/scholarships/\">this scholarship opportunity</a>. I hope all of us could go together, to learn, and have fun!</p>\n<p>I know this article is a little bit long, but please read through this carefully before you start. If you have any questions, just ask me through messenger, or in the comment area below.</p>\n<blockquote>\n<p>I’ll be constantly updating this, and the Chinese version is available <a href=\"https://apollozhu.github.io/2018/03/16/wwdc18-scholarships-info-cn/\">here</a>.</p>\n</blockquote>\n<span id=\"more\"></span>\n<h2 id=\"important-dates\"><a class=\"markdownIt-Anchor\" href=\"#important-dates\"></a> Important Dates</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:right\">Date</th>\n<th>Event</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:right\">April 1, 20:00 EDT</td>\n<td>Submission Due</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">April 20</td>\n<td>Announce Status</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">June 3-8</td>\n<td>Orientation + WWDC!</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"general-information\"><a class=\"markdownIt-Anchor\" href=\"#general-information\"></a> General Information</h2>\n<p>Please read the <a href=\"https://developer.apple.com/wwdc/scholarships/\">description</a> carefully, as well as the <a href=\"https://developer.apple.com/wwdc/scholarships/terms/WWDC18-Scholarship-Terms-and-Conditions.pdf\">terms and conditions</a>. In summary, you are required to write a Playground – an interactive program – that is creative and technically accomplished.</p>\n<h2 id=\"things-to-get\"><a class=\"markdownIt-Anchor\" href=\"#things-to-get\"></a> Things to Get</h2>\n<p>You do <em><strong>NOT</strong></em> need a paid Apple Developer Account. Do you know what’s better than that? You’ll get one year of Apple Developer membership if you win!</p>\n<p>If you have a Mac, download <a href=\"https://itunes.apple.com/app/id497799835\">Xcode from Mac App Store</a>, or if you have an iPad, download <a href=\"https://itunes.apple.com/app/id908519492\">Swift Playgrounds from App Store</a>, or if you have a Windows, get a virtual machine or whatever that works.</p>\n<h2 id=\"learn-swift\"><a class=\"markdownIt-Anchor\" href=\"#learn-swift\"></a> Learn Swift</h2>\n<p>If you have an iPad, I highly recommend you to go through one of those “Learn to Code” playgrounds to get a general idea about what a legit playground should be like, in addition to the Swift programming language itself.</p>\n<p>At the same time, everyone by now should have either an iOS device or a Mac, please open (i)Books and get <em><a href=\"https://itunes.apple.com/book/id1002622538\">The Swift Programming Language</a></em>. You can always choose to <a href=\"https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/index.html\">read it online</a> as well.</p>\n<p>Most of you are already familiar with Java, so reading just “A Swift Tour” should be adequate for you to understand this simple programming language. For those of you never learned programming before, just scan through that, and chapter 2 (Language Guide) will answer your questions.</p>\n<p>You do <em>NOT</em> need to read chapter 3 (Language Reference) and 4 (Revision History).</p>\n<h2 id=\"general-stuff-to-learn\"><a class=\"markdownIt-Anchor\" href=\"#general-stuff-to-learn\"></a> General Stuff to Learn</h2>\n<h3 id=\"i-want-to-write-a-2d-game\"><a class=\"markdownIt-Anchor\" href=\"#i-want-to-write-a-2d-game\"></a> I Want to Write a 2D game</h3>\n<p>You should learn <a href=\"https://developer.apple.com/spritekit/\">SpriteKit</a>.</p>\n<h3 id=\"i-want-to-write-a-3d-game\"><a class=\"markdownIt-Anchor\" href=\"#i-want-to-write-a-3d-game\"></a> I Want to Write a 3D game</h3>\n<p>You should learn <a href=\"https://developer.apple.com/scenekit/\">SceneKit</a>, but I hope you’ve already had some sense of how 3D works and where to get your 3D models. A bonus for you, <a href=\"https://developer.apple.com/videos/play/wwdc2017/605/\">Apple talked about using SceneKit in the iPad version of Swift Playgrounds</a>.</p>\n<h3 id=\"otherwise\"><a class=\"markdownIt-Anchor\" href=\"#otherwise\"></a> Otherwise</h3>\n<p>Well, <a href=\"https://developer.apple.com/documentation/uikit\">UIKit</a> itself can do a lot of stuff. To get started, follow <a href=\"https://developer.apple.com/library/content/referencelibrary/GettingStarted/DevelopiOSAppsSwift/\">Start Developing iOS Apps (Swift)</a>.</p>\n<p>If you have time, you may also want to have a general understanding of how <a href=\"https://developer.apple.com/library/content/featuredarticles/ViewControllerPGforiPhoneOS\">view controllers work</a>, maybe more about <a href=\"https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/TableView_iPhone/AboutTableViewsiPhone/AboutTableViewsiPhone.html\">table views</a>, or even <a href=\"https://developer.apple.com/library/content/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/Introduction/Introduction.html\">iOS Apps in general</a>.</p>\n<h2 id=\"more-about-playground\"><a class=\"markdownIt-Anchor\" href=\"#more-about-playground\"></a> More About Playground</h2>\n<p>No matter what, you should read the <a href=\"https://developer.apple.com/library/content/documentation/Xcode/Reference/xcode_markup_formatting_ref/\">Markup Formatting Reference</a>. Your Playground will look a lot better with this in conjunction with <code>CustomPlaygroundQuickLookable</code>/<code>CustomPlaygroundDisplayConvertible</code>.</p>\n<h3 id=\"mac-xcode-and-playground\"><a class=\"markdownIt-Anchor\" href=\"#mac-xcode-and-playground\"></a> Mac, Xcode, and Playground</h3>\n<p>It was first <a href=\"https://developer.apple.com/videos/play/wwdc2014/408/\">introduced back in 2014</a>, and later in 2015 you can use the format mentioned above to <a href=\"https://developer.apple.com/videos/play/wwdc2015/405/\">author rich Playgrounds</a> to better instruct your users. Here is <a href=\"https://developer.apple.com/library/content/samplecode/StarterPlaygroundBook/Introduction/Intro.html\">a simple Swift Playground Book</a> for you to get started, and you can also find other interesting ones from the <a href=\"https://developer.apple.com/swift/blog/\">Swift Blog</a>, although many of them would be outdated and require some changes for them to work.</p>\n<h3 id=\"ipad-and-swift-playgrounds\"><a class=\"markdownIt-Anchor\" href=\"#ipad-and-swift-playgrounds\"></a> iPad and Swift Playgrounds</h3>\n<p>This app is first <a href=\"https://developer.apple.com/videos/play/wwdc2016/408/\">introduced in 2016</a> and <a href=\"https://developer.apple.com/videos/play/wwdc2017/408/\">updated again last year</a>. iPad Playground has many features that a normal Xcode Playground doesn’t have – Cut Scenes written in html (a great place to inform your user what’s this chapter about), cover images, vocab lists, etc. To fully utilize those features, please read the <a href=\"https://developer.apple.com/library/content/documentation/Xcode/Conceptual/swift_playgrounds_doc_format/\">Playground Book Format Reference</a>, and experiment with <a href=\"https://developer.apple.com/library/content/samplecode/TalkingToTheLiveView/Introduction/Intro.html\">this sample</a> that allows you to send messages to a Swift Playground live view and saving data to its key-value store.</p>\n<h2 id=\"analysis\"><a class=\"markdownIt-Anchor\" href=\"#analysis\"></a> Analysis</h2>\n<p>Remember that your playground will be judged offline, the program can <em><strong>NOT</strong></em> require an account for sign in, and they’ll only spend 3 minutes in judging it, so think about what you are going to do. Even without thinking I can tell you many people will be doing <a href=\"https://developer.apple.com/arkit\">augmented reality</a> and <a href=\"https://developer.apple.com/coreml\">machine learning</a>; you can not imagine how easy it is to implement those fancy but scary stuff with ARKit and Core ML. Well, try to be creative, add some graphics and audios, and incorporate some of Apple’s new technologies (even if they didn’t mention about that)…</p>\n<p>For the first time, you are allowed to use open source frameworks (providing that you included their licenses correctly and explained why). Nonetheless, what you are going to submit is not just a normal program. I think these are some reasons why Apple prefers Playground over normal apps, and maybe you want to address some of them:</p>\n<ol>\n<li>user will be directed about what to do and informed of what is expected</li>\n<li>it provide an interactive way for the users to <a href=\"https://developer.apple.com/videos/play/wwdc2017/416/\">learn things through programming</a></li>\n<li>it sparks users’ interest in coding and encourages further participation</li>\n<li>…(many more to add)</li>\n</ol>\n<p>Also, the “Beyond WWDC” essay is very important. You should explain, in 500 words, how you share your coding knowledge and enthusiasm for computer science with others. Spend some time on this and revise it several times.</p>\n<p>However, that doesn’t mean the playground itself isn’t important. There were many amazing playgrounds, such as <a href=\"https://www.youtube.com/watch?v=cq_zLMKB-SE\">this one here</a>, but the quality of the <a href=\"https://www.youtube.com/playlist?list=PLl469UE7Uwr0bdon2CvnpxmQs16qu4nkf\">other ones</a> varies. So my suggestion is analysis why some of them got accepted and some got rejected, see if you can resonate with <a href=\"https://itunes.apple.com/story/id1358780266\">former winners</a>, and just try your best.</p>\n<p>If you’d ever ask me if it’s hard, I’ll answer yes but <em><strong>DOABLE</strong></em>. Just make sure you don’t copy any others’ code – the <a href=\"https://github.com/wwdc/2017/issues/7\">2048 playground</a> from <a href=\"https://github.com/wwdc/2017\">last year’s submissions</a> was <strong>rejected</strong> for this reason.</p>\n<blockquote class=\"blockquote-center\">\n<p>Everything is doable if you try.</p>\n<p><strong>Mr. Lau</strong></p>\n\n</blockquote>\n<p>Good luck.</p>\n<p>– Apollo (a.k.a Zhiyu Zhu, last year’s scholarship winner for submitting <a href=\"https://github.com/ApolloZhu/Swifty-Karel/tree/master\">Karel the Robot Playground</a>)</p>\n",
            "tags": [
                "WWDC18",
                "WWDC",
                "Swift"
            ]
        },
        {
            "id": "https://apollozhu.github.io/en/2017/08/23/github-swift-style-guide-irony/",
            "url": "https://apollozhu.github.io/en/2017/08/23/github-swift-style-guide-irony/",
            "title": "GitHub's Swift Style Guide",
            "date_published": "2017-08-23T21:02:25.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/en/assets/css/APlayer.min.css\"><script src=\"/en/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/en/assets/js/Meting.min.js\"></script><p>When I was cleaning up my GitHub repos and stars, I found <a href=\"https://github.com/github/swift-style-guide\">GitHub’s style guide for Swift</a>, and I find this 2nd most starred style guide quite amusing.</p>\n<span id=\"more\"></span>\n<p>Despite the fact that Xcode defaults to using 4 spaces for indentation (and we can clearly see the impact by checking <a href=\"https://ukupat.github.io/tabs-or-spaces/\">tabs-or-spaces</a>), the style guide suggests using tabs instead. I’m totally fine with that, but I can easily tell there are some disagreements among the contributors:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myGreatProperty: <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">4</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">subscript</span>(<span class=\"params\">index</span>: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">T</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> objects[index]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>But there’s more. For now (2017 Auguest 23), there are three <a href=\"https://github.com/github?language=swift\">Swift repos</a> under GitHub’s <a href=\"https://github.com/github\">main account</a> – one source, two forks. Well, then let’s focus on <a href=\"https://github.com/github/SoftU2F\">SoftU2F</a>, the ONLY Swift repository GitHub actually owns. Isn’t it natural for me to expect this repo to follow GitHub’s own style guide? But ironically, even SoftU2F is <em><strong>NOT</strong></em> doing that!</p>\n<p><img src=\"https://octodex.github.com/images/front-end-conftocat.png\" alt=\"The Front-End Conftocat on GitHub Octoex\" /></p>\n<p>In conclusion, seems that GitHub is not interested in styling their Swift code, and thus the GitHub community (or at least the 4k stargazers) has no actual intention to follow GitHub’s style guide, too.</p>\n",
            "tags": [
                "Swift",
                "git"
            ]
        }
    ]
}